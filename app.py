# -*- coding: utf-8 -*-
"""313831011.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17p9jVXAAaDef7Z7goKNWSldfShrI31E7
"""



import gradio as gr
import cv2
import numpy as np
from skimage import filters, restoration, color, segmentation, measure
from skimage.draw import disk

# functions
# image_path: /content/example_images/img1.jpg
def load_example_image(image_name):
  image_path = f"/content/example_images/{image_name}"
  image = cv2.imread(image_path)
  if image is None:
    print(f"Error: Unable to load image at {image_path}")
    return None
  return cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

def edge_detection(image, thr1=50, thr2=150):
  gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
  edges = cv2.Canny(gray_image, thr1, thr2)
  return edges
  # edges = filters.sobel(gray_image)
  # return (edges * 255).astype(np.uint8)

def segmentation_demo(image, compactness, n_segments):
  labels = segmentation.slic(image, compactness=compactness, n_segments=n_segments, start_label=1)
  segmented_image = color.label2rgb(labels, image, kind='avg')
  return segmented_image

def segmentation(image, k=5):
  img = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
  pixels = image.reshape(-1, 3)  # (h*w, rgb)
  pixels = np.float32(pixels)

  criteria = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.2)
  _, labels, centers = cv2.kmeans(pixels, k, None, criteria, 10, cv2.KMEANS_RANDOM_CENTERS)

  centers = np.uint8(centers)
  segmented_image = centers[labels.flatten()]
  segmented_image = segmented_image.reshape(image.shape)
  return segmented_image

def apply_blur(image, method="average", kernel_size=5):
  if method == "average":
    return cv2.blur(image, (kernel_size, kernel_size))
  elif method == "gaussian":
    return cv2.GaussianBlur(image, (kernel_size, kernel_size), 0)
  elif method == "median":
    return cv2.medianBlur(image, kernel_size)
  else:
    raise ValueError("Unknown method! Choose from 'average', 'gaussian', 'median'.")

# Gradio
def main():
  with gr.Blocks() as app:
    gr.Markdown("## Computer Vision App")

    with gr.Tabs():
      with gr.Tab("Edge Detection"):
        example_images = ["img1.jpg", "img2.jpg", "img3.jpg", "img4.jpg", "img5.jpg"]
        image_selector = gr.Dropdown(choices=example_images, label="Select Example Image")
        input_image = gr.Image(type="numpy", label="Input Image")
        thr1_slider = gr.Slider(30, 100, value=50, label="Edge Detection: threshold1")
        thr2_slider = gr.Slider(90, 150, value=100, label="Edge Detection: threshold2")
        output_image = gr.Image(type="numpy", label="Output Image")
        def update_image(image_name):
          return load_example_image(image_name)
        image_selector.change(update_image, inputs=[image_selector], outputs=[input_image])
        gr.Button("Run").click(
          edge_detection,
          inputs=[input_image, thr1_slider, thr2_slider],
          outputs=output_image
        )

      with gr.Tab("Segmentation"):
        example_images = ["img1.jpg", "img2.jpg", "img3.jpg", "img4.jpg", "img5.jpg"]
        image_selector = gr.Dropdown(choices=example_images, label="Select Example Image")
        input_image = gr.Image(type="numpy", label="Input Image")
        class_slider = gr.Slider(3, 10.0, step=1, value=5, label="class")
        output_image = gr.Image(type="numpy", label="Output Image")
        def update_image(image_name):
          return load_example_image(image_name)
        image_selector.change(update_image, inputs=[image_selector], outputs=[input_image])
        gr.Button("Run").click(
          segmentation,
          inputs=[input_image, class_slider],
          outputs=output_image
        )

      with gr.Tab("Blurring"):
        example_images = ["img1.jpg", "img2.jpg", "img3.jpg", "img4.jpg", "img5.jpg"]
        image_selector = gr.Dropdown(choices=example_images, label="Select Example Image")
        input_image = gr.Image(type="numpy", label="Input Image")
        method_dropdown = gr.Dropdown(
          ["average", "gaussian", "median"],
          value="average",
          label="Blur Method"
        )
        kernel_slider = gr.Slider(3, 11, step=2, value=5, label="Kernel Size")
        output_image = gr.Image(type="numpy", label="Output Image")
        def update_image(image_name):
          return load_example_image(image_name)
        image_selector.change(update_image, inputs=[image_selector], outputs=[input_image])
        gr.Button("Run").click(
          apply_blur,
          inputs=[input_image, method_dropdown, kernel_slider],
          outputs=output_image,
        )

  return app

# main
if __name__ == "__main__":
  app = main()
  app.launch()

import gradio as gr

def greet(name, morning, temp):
    situation = 'Good morning' if morning else 'Good evening'
    greeting = f'{situation} {name}. It is {temp} degrees today.'
    celsius = (temp-32)*5/9
    return greeting, round(celsius,2)

demo = gr.Interface(
    fn = greet,
    inputs = ["text", "checkbox", gr.Slider(0,100)],
    outputs = ["text", "number"]
)
demo.launch(share=True)